load_module "/usr/lib/nginx/modules/ngx_stream_module.so";
load_module "/usr/lib/nginx/modules/ngx_lua_module.so";

worker_processes 1;

error_log  stderr  notice;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    map_hash_bucket_size 128;
    map_hash_max_size 4096;

    log_format main '$remote_addr - $remote_user [$time_local] '
                             '"$request" $status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent"';

    access_log /dev/stdout main;

    server {
        listen 127.0.0.1:8081;

        location / {
            return 404;
        }

        location /metrics {
            content_by_lua_block {
                local prometheus = require "resty.prometheus"
                prometheus:collect()
            }
        }

        location /healthz {
            default_type text/plain;
            return 200 "OK\n";
        }
    }
}

stream {
    lua_shared_dict prometheus_metrics 10M;
    map_hash_bucket_size 128;
    map_hash_max_size 4096;

    log_format main '$proxy_protocol_addr - $remote_addr [$time_local] '
                    '$protocol $status $bytes_sent $bytes_received '
                    '$session_time "$upstream_addr" '
                      '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';

    access_log /dev/stdout main;

    resolver kube-dns.kube-system.svc.cluster.local valid=30s;
    resolver_timeout 5s;

    init_by_lua_block {
        local prom = require "docker.nginx.prometheus"
        prom.init()
    }

    server {
        listen 127.0.0.1:8443 proxy_protocol;
        ssl_preread on;
        proxy_pass $ssl_preread_server_name:443;
        proxy_protocol off;

        log_by_lua_block {
            local prom = require "docker.nginx.prometheus"
            prom.log_connect_time()
        }
    }
}
