{{- $releaseNamespace := .Release.Namespace -}}
{{- $clusterDomain := .Values.clusterDomain -}}
{{- $proxyFullname := include "ggbridge.proxy.fullname" . -}}

{{- $fullname := "" -}}
{{- $ports := dict -}}
{{- if eq .Values.mode "server" -}}
    {{- $fullname = include "ggbridge.server.fullname" . -}}
    {{- range $key, $value := .Values.server.tunnels -}}
        {{- if $value.enabled -}}
            {{- $_ := set $ports $key (get $.Values.proxy.service.ports $key) }}
        {{- end -}}
    {{- end -}}
{{- else -}}
    {{- $fullname = include "ggbridge.client.fullname" . -}}
    {{- range $key, $value := .Values.client.tunnels -}}
        {{- if $value.enabled -}}
            {{- $_ := set $ports $key (get $.Values.proxy.service.ports $key) }}
        {{- end -}}
    {{- end -}}
{{- end -}}

load_module "/usr/lib/nginx/modules/ngx_stream_module.so";

worker_processes 1;

error_log  stderr  notice;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

stream {
    log_format main '$remote_addr [$time_local] '
                    '$protocol $status $bytes_sent $bytes_received '
                    '$session_time "$upstream_addr" '
                      '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';

    access_log /dev/stdout main;

    resolver {{ printf "kube-dns.kube-system.svc.%s" $clusterDomain }} valid=30s;
    resolver_timeout 5s;

    {{ range $protocol, $config := $ports }}
    upstream {{ $protocol }} {
        least_conn;
        {{ range $index := until (include "ggbridge.deploymentCount" $ | int) }}
          {{- $indexProxyFullname := printf "%s-proxy-%d" $fullname ($index | int) }}
        {{ printf "server %s:%d;" (printf "%s.%s.svc.%s" $indexProxyFullname $releaseNamespace $clusterDomain) ($config.port | int) }}
        {{ end }}
    }
    {{ end }}

    {{ range $protocol, $config := $ports }}
    server {
        listen {{ $config.port }};
        proxy_pass {{ $protocol }};
        proxy_timeout 600s;
        proxy_connect_timeout 5s;
    }
    {{ end }}
}
