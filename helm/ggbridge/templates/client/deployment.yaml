{{- if (eq .Values.mode "client") -}}
  {{- range $index := until (.Values.deploymentCount | int) }}
    {{- $fullname := include "ggbridge.fullname" $ }}
    {{- $clientFullname := include "ggbridge.client.fullname" $ }}
    {{- $indexClientFullname := printf "%s-%d" $clientFullname ($index | int) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $indexClientFullname }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "ggbridge.labels" $ | nindent 4 }}
    {{- include "ggbridge.client.labels" $ | nindent 4 }}
  {{- if or $.Values.commonAnnotations $.Values.annotations }}
  {{- $annotations := include "ggbridge.tplvalues.merge" ( dict "values" ( list $.Values.annotations $.Values.commonAnnotations ) "context" $ ) }}
  annotations: {{- include "ggbridge.tplvalues.render" ( dict "value" $annotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ $.Values.replicaCount }}
  {{- with $.Values.updateStrategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "ggbridge.selectorLabels" $ | nindent 6 }}
      {{- include "ggbridge.client.selectorLabels" $ | nindent 6 }}
      index: {{ $index | quote }}
  template:
    metadata:
      annotations:
        checksum/config: {{ printf "%s" (include (print $.Template.BasePath "/client/configmap.yaml") $) | sha256sum }}
      {{- with $.Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ggbridge.labels" $ | nindent 8 }}
        {{- include "ggbridge.client.labels" $ | nindent 8 }}
        {{- with $.Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        index: {{ $index | quote }}
    spec:
      {{- with $.Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ggbridge.serviceAccountName" $ }}
      {{- if $.Values.podSecurityContext.enabled }}
      securityContext:
        {{- toYaml (omit $.Values.podSecurityContext "enabled") | nindent 8 }}
      {{- end }}
      {{- if or (or $.Values.caBundle.certs $.Values.caBundle.existingSecret) (and $.Values.tls.enabled $.Values.client.tlsVerifyCert) }}
      initContainers:
        - name: ca
          {{- if $.Values.containerSecurityContext.enabled }}
          securityContext:
            {{- toYaml (omit $.Values.containerSecurityContext "enabled") | nindent 12 }}
          {{- end }}
          image: {{ include "ggbridge.shell.image" $ }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -x
              cat $SSL_CERT_FILE > /ca-certs/ca-bundle.crt
              if [ -s /ca-bundle/ca-bundle.crt ]; then
                cat /ca-bundle/ca-bundle.crt  >> /ca-certs/ca-bundle.crt
              fi
              if [ -s /certs/ca.crt ]; then
                cat /certs/ca.crt  >> /ca-certs/ca-bundle.crt
              fi
              chmod 0444 /ca-certs/ca-bundle.crt
          volumeMounts:
            - name: ca-certs
              mountPath: /ca-certs
            {{- if or $.Values.caBundle.certs $.Values.caBundle.existingSecret }}
            - name: ca-bundle
              mountPath: /ca-bundle
              readOnly: true
            {{- end }}
            {{- if $.Values.tls.enabled }}
            - name: tls-secret
              mountPath: /certs
              readOnly: true
            {{- end }}
      {{- end }}
      containers:
        - name: ggbridge
          {{- if $.Values.containerSecurityContext.enabled }}
          securityContext:
            {{- toYaml (omit $.Values.containerSecurityContext "enabled") | nindent 12 }}
          {{- end }}
          image: {{ include "ggbridge.image" $ }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command: ["ggbridge"]
          args: ["client"]
          {{- if $.Values.client.tunnels }}
          ports:
            {{- range $key, $value := $.Values.client.tunnels }}
              {{- if $value.enabled }}
                {{- $port := get $.Values.proxy.service.ports $key }}
            - name: {{ $key }}
              containerPort: {{ $port.containerPort }}
              protocol: TCP
              {{- end }}
            {{- end }}
          {{- end }}
          env:
            - name: SERVER_ADDRESS
              value: {{ include "ggbridge.hostname" $ | quote }}
            - name: SERVER_PATH_PREFIX
              value: {{ $index | quote }}
            - name: TLS_ENABLED
              value: {{ $.Values.tls.enabled | quote }}
            - name: TLS_VERIFY_CERTIFICATE
              value: {{ (and $.Values.tls.enabled $.Values.tls.verifyCert) | quote }}
            - name: NGINX_EMBEDDED
              value: "false"
            {{- with $.Values.dnsResolver }}
            - name: DNS_RESOLVER
              value: {{ . | quote }}
            {{- end }}
            {{- with $.Values.client.connectionMinIdle }}
            - name: CONNECTION_MIN_IDLE
              value: {{ . | quote }}
            {{- end }}
            {{- with $.Values.logLevel }}
            - name: LOG_LEVEL
              value: {{ . | quote }}
            {{- end }}
            - name: CLIENT_TUNNEL_SOCKS_ENABLED
              value: {{ $.Values.client.tunnels.socks.enabled | quote }}
            - name: CLIENT_TUNNEL_TLS_ENABLED
              value: {{ $.Values.client.tunnels.tls.enabled | quote }}
            - name: CLIENT_TUNNEL_WEB_ENABLED
              value: {{ $.Values.client.tunnels.web.enabled | quote }}
            - name: SERVER_TUNNEL_SOCKS_ENABLED
              value: {{ $.Values.server.tunnels.socks.enabled | quote }}
            - name: SERVER_TUNNEL_TLS_ENABLED
              value: {{ $.Values.server.tunnels.tls.enabled | quote }}
            - name: SERVER_TUNNEL_WEB_ENABLED
              value: {{ $.Values.server.tunnels.web.enabled | quote }}
            - name: TUNNEL_HEALTH_PORT
              value: {{ $.Values.proxy.service.ports.health.containerPort | quote }}
            - name: TUNNEL_HEALTH_REMOTE_PORT
              value: {{ $.Values.proxy.service.ports.health.remoteContainerPort | quote }}
            - name: TUNNEL_SOCKS_PORT
              value: {{ $.Values.proxy.service.ports.socks.containerPort | quote }}
            - name: TUNNEL_TLS_PORT
              value: {{ $.Values.proxy.service.ports.tls.containerPort | quote }}
            - name: TUNNEL_TLS_REMOTE_PORT
              value: {{ $.Values.proxy.service.ports.tls.remoteContainerPort | quote }}
            - name: TUNNEL_WEB_PORT
              value: {{ $.Values.proxy.service.ports.web.internalPort | quote }}
            - name: TUNNEL_WEB_REMOTE_PORT
              value: {{ $.Values.proxy.service.ports.web.remoteContainerPort | quote }}
            {{- if or (or $.Values.caBundle.certs $.Values.caBundle.existingSecret) (and $.Values.tls.enabled $.Values.client.tlsVerifyCert) }}
            - name: SSL_CERT_FILE
              value: /ca-certs/ca-bundle.crt
            {{- end }}
            {{- if $.Values.extraEnv }}
            {{- include "ggbridge.tplvalues.render" (dict "value" $.Values.extraEnv "context" $) | nindent 12 }}
            {{- end }}
          {{- if $.Values.client.readinessProbe.enabled }}
          readinessProbe:
            {{- toYaml (omit $.Values.client.readinessProbe "enabled") | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: run
              mountPath: /var/run
            - name: ca-certs
              mountPath: /ca-certs
              readOnly: true
            {{- if $.Values.tls.enabled }}
            - name: tls-secret
              mountPath: /certs
              readOnly: true
            {{- end }}
          resources:
            {{- toYaml $.Values.resources | nindent 12 }}
        - name: nginx
          {{- if $.Values.containerSecurityContext.enabled }}
          securityContext:
            {{- toYaml (omit $.Values.containerSecurityContext "enabled") | nindent 12 }}
          {{- end }}
          image: {{ include "ggbridge.image" $ }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command: ['/usr/sbin/nginx']
          args: ['-c', '/etc/nginx/nginx.conf', '-e', '/dev/stderr', '-g', 'daemon off;']
          ports:
            - name: health
              containerPort: {{ $.Values.proxy.service.ports.health.containerPort }}
              protocol: TCP
          {{- if or $.Values.caBundle.certs $.Values.caBundle.existingSecret }}
          env:
            - name: SSL_CERT_FILE
              value: /ca-certs/ca-bundle.crt
          {{- end }}
          volumeMounts:
            - name: ca-certs
              mountPath: /ca-certs
              readOnly: true
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-tmp
              mountPath: /var/lib/nginx/tmp
            - name: run
              mountPath: /var/run
            - name: config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
          resources:
            {{- toYaml $.Values.resources | nindent 12 }}
      terminationGracePeriodSeconds: {{ $.Values.terminationGracePeriodSeconds }}
      volumes:
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-tmp
          emptyDir: {}
        - name: run
          emptyDir: {}
        - name: config
          configMap:
            name: {{ $clientFullname }}
            defaultMode: 420
        - name: ca-certs
          emptyDir: {}
        {{- if or $.Values.caBundle.certs $.Values.caBundle.existingSecret }}
        - name: ca-bundle
          secret:
            {{- if $.Values.caBundle.certs }}
            secretName: {{ printf "%s-ca-bundle" $fullname }}
            items:
              - key: ca.crt
                path: ca-bundle.crt
            {{- else }}
            secretName: {{ $.Values.caBundle.existingSecret }}
            items:
              - key: {{ default "ca.crt" $.Values.tls.existingSecretKeys.caCrt }}
                path: ca-bundle.crt
            {{- end }}
        {{- end }}
        {{- if $.Values.tls.enabled }}
        - name: tls-secret
          secret:
            {{- if $.Values.tls.existingSecret }}
            secretName: {{ $.Values.tls.existingSecret }}
            items:
              - key: {{ default "ca.crt" $.Values.tls.existingSecretKeys.caCrt }}
                path: ca.crt
              - key: {{ default "tls.crt" $.Values.tls.existingSecretKeys.crt }}
                path: client.crt
              - key: {{ default "tls.key" $.Values.tls.existingSecretKeys.key }}
                path: client.key
            {{- else }}
            secretName: {{ printf "%s-crt" $clientFullname }}
            items:
              - key: ca.crt
                path: ca.crt
              - key: tls.crt
                path: client.crt
              - key: tls.key
                path: client.key
            {{- end }}
            defaultMode: 420
        {{- end }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- $affinity := include "ggbridge.tplvalues.merge" ( dict "values" ( list $.Values.affinity (include "ggbridge.affinity" (dict "index" $index "context" $)) ) "context" $ ) }}
      affinity:
        {{- include "ggbridge.tplvalues.render" ( dict "value" $affinity "context" $) | nindent 8 }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}

  {{- end }}
{{- end }}
