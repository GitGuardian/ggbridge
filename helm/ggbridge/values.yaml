# Default values for ggbridge.

# -- Override the default chart name
nameOverride: ""
# -- Override the default fully qualified app name
fullnameOverride: ""

# -- Kubernetes cluster domain
clusterDomain: cluster.local

# -- Add annotations to all the deployed resources
commonAnnotations: {}
# -- Add labels to all the deployed resources
commonLabels: {}

# -- This is for setting Kubernetes Annotations to a Pod
podAnnotations: {}
# -- This is for setting Kubernetes Labels to a Pod
podLabels: {}

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  # -- Image registry
  registry: ghcr.io
  # -- Image repository
  repository: gitguardian/ggbridge
  # -- Image tag
  tag: ""
  # -- Image digest in the way sha256:aa....
  digest: ""

  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Image pull secrets
  pullSecrets: []

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # @ignored
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use
  name: ""

podSecurityContext:
  # -- Enable Pod security Context in deployments
  enabled: true
  # @ignored
  fsGroupChangePolicy: Always
  # @ignored
  sysctls: []
  # @ignored
  supplementalGroups: []
  # @ignored
  fsGroup: 65532

containerSecurityContext:
  # -- Enable Container security Context in deployments
  enabled: true
  # @ignored
  seLinuxOptions: {}
  # @ignored
  runAsUser: 65532
  # @ignored
  runAsGroup: 65532
  # @ignored
  runAsNonRoot: true
  # @ignored
  privileged: false
  # @ignored
  readOnlyRootFilesystem: true
  # @ignored
  allowPrivilegeEscalation: false
  # @ignored
  capabilities:
    drop: ["ALL"]
  # @ignored
  seccompProfile:
    type: "RuntimeDefault"

# -- Array with extra environment variables
## e.g:
## extraEnv:
##   - name: FOO
##     value: "bar"
##
extraEnv: []

resources:
  # -- Set container requests
  requests:
    cpu: 100m
    memory: 128Mi
  # -- Set container limits
  limits: {}

# -- Node labels for pod assignment
nodeSelector: {}
# -- Affinity for pod assignment
affinity: {}
# -- Tolerations for pod assignment
tolerations: []
# -- Topology spread constraints for pod assignment
topologySpreadConstraints: []

terminationGracePeriodSeconds: 300

# -- Deployment mode: "client" or "server"
mode: client

# -- Domain
domain: ggbridge.gitguardian.com
# -- Subdomain
subdomain: ""
# -- Hostname
hostname: ""

# -- Set log level
logLevel: INFO

# -- Dns resolver to use to lookup ips of domain name
dnsResolver: ""

proxyProtocol:
  # -- When true, enables proxy protocol v2 for web/tls tunnels
  enabled: true

caBundle:
  # -- Specify CA certificates to inject (PEM format)
  certs: ""
  # -- Specify the secret containing the CA certificate to inject
  existingSecret: ""
  # -- Specify secret key under the CA certificated is stored
  existingSecretKey: ca.crt
  image:
    # -- Image registry
    registry: ghcr.io
    # -- Image repository
    repository: gitguardian/ggbridge
    # -- Image tag
    tag: ""
    # -- Image digest in the way sha256:aa....
    digest: ""

    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Image pull secrets
    pullSecrets: []

tls:
  # -- Enable TLS traffic support
  enabled: false
  # -- Enable TLS certificate verification
  verifyCert: true
  # -- TLS mode (can be "mutual" or "simple")
  mode: mutual
  # -- Generate automatically self-signed TLS certificates
  autoGenerated: false
  certManager:
    # -- Manage certifcates with cert-manager
    enabled: false
    # -- cert-manager namespace
    namespace: cert-manager
    # -- cert-manager service account name
    serviceAccount: cert-manager
    rbac:
      create: true
      # -- Grants cert-manager permissions to the sepcfied subjects (Deprecated)
      ## e.g:
      ## subjects:
      ##   - kind: ServiceAccount
      ##     name: gim
      ##     namespace: gim
      subjects: []
    issuer:
      # -- Set Issuer to use
      name: ""
      # -- Issuer kind ("Issuer" or "ClusterIssuer")
      kind: Issuer
      # -- Set Issuer spec (if specified, it will manage the issuer)
      spec: {}
  # -- Specify TLS secret containing the certificate
  existingSecret: ""
  existingSecretKeys:
    # -- Existing secret key storing the Certificate Authority
    caCrt: ""
    # -- Existing secret key storing the server certificate
    crt: ""
    # -- Existing secret key storing the server certificate key
    key: ""
  # -- CA certificate in PEM format
  caCrt: ""
  # -- Server certificate in PEM format
  crt: ""
  # -- Server certificate key in PEM format
  key: ""

# -- Specify hosts whitelist (Only available for web and tls tunnel)
## e.g:
## whitelist:
##   hosts:
##     - hook.gitguardian.com
##   cidr:
##     - 10.85.0.0/16
whitelist:
  hosts: []
  cidr: []

# -- Number of deployments
deploymentCount: 3
# -- Number of pods for each deployment
replicaCount: 1
updateStrategy:
  # -- Customize updateStrategy of Deployment
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 1

# -- Set server annotations
annotations: {}
# -- Set server labels
labels: {}

pdb:
  # -- Enable/disable a Pod Disruption Budget creation
  create: true
  # -- Minimum number of pods that must still be available after the eviction
  minAvailable: 1
  # -- Max number of pods that can be unavailable after the eviction
  maxUnavailable: ""

networkPolicy:
  # -- Specifies whether a NetworkPolicy should be created
  enabled: true
  # -- When true, server will accept connections from any source
  allowExternal: true
  # -- Add egress rules to the NetworkPolicy.
  # By default, allow all egress traffic.
  # e.g:
  # extraEgress:
  #   - to:
  #       - ipBlock:
  #           cidr: 0.0.0.0/0
  extraEgress: []
  # -- Add extra ingress rules to the NetworkPolicy
  extraIngress: []
  # -- Labels to match to allow traffic to the proxy server from other namespaces
  ingressNSMatchLabels: {}
  # -- Pod labels to match to allow traffic to the proxy server from other namespaces
  ingressNSPodMatchLabels: {}

client:
  # -- Pool of open connection to the server, in order to speed up the connection process
  connectionMinIdle: 0

  tunnels:
    health:
      # -- Enable client to server health tunnel
      enabled: true
    socks:
      # -- Enable client to server socks tunnel
      enabled: false
    tls:
      # -- Enable client to server tls tunnel
      enabled: false
    web:
      # -- Enable client to server web tunnel (for HTTP/HTTPS traffic)
      enabled: false

  reverseTunnels:
    health:
      # -- Enable server to client health tunnel
      enabled: true
    socks:
      # -- Enable server to client socks tunnel
      enabled: true
    tls:
      # -- Enable server to client tls tunnel
      enabled: false
    web:
      # -- Enable server to client web tunnel (for HTTP/HTTPS traffic)
      enabled: false

  readinessProbe:
    # -- Enable Client Readiness Probe
    enabled: true
    exec:
      command:
        - ggbridge
        - healthcheck
        - -grace-period=60
        - http://127.0.0.1:9081/healthz
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 1

server:
  # -- Configure how much time a tunnel server is going to wait idle (without any new ws clients) before unbinding itself/stopping the server
  idleTimeout: 30

  service:
    # -- Specify server serivce annottions
    annotations: {}
    # -- Kubernetes Service type
    type: ClusterIP
    ports:
      ws:
        # -- Set the server websocket service port
        port: 9000
        # -- Set the server websocket container port
        containerPort: 9000

  ingress:
    # -- Enable exposure using Kubernetes Ingress API
    enabled: false
    # -- Specify the ingress controller
    controller: ""
    # -- Set the ingress ClassName
    className: ""
    # -- Set ingress annotations
    annotations: {}

  gateway:
    # -- Enable server exposure using Kubernetes Gateway API
    enabled: false
    gateway:
      # -- Specifies whether a Gateway resource should be created alongside the routing resource (HTTPRoute)
      create: true
      # -- Set the gatewayClassName
      className: ""
      # -- Specify Gateway ports number
      ports:
        http: 80
        https: 443
    # -- Specify the existing gateway resources
    parentRefs: []
    # -- Set gateway annotations
    annotations: {}

  istio:
    # -- Enable server exposure using Istio ingress
    enabled: false
    gateway:
      # -- Specifies whether an Istio Gateway resource should be created alongside the Virtual Service
      create: true
      # -- Specify the gateway namespace
      namespace: ""
      # -- Set Istio Gateway selector
      selector:
        istio: ingress
      # -- Specify Istio Gateway ports number
      ports:
        http: 80
        https: 443
      # -- Specify Gateway TLS options
      tls:
        # -- Set the exising TLS secret
        credentialName: ""
        minProtocolVersion: TLSV1_2
    # -- Specify the existing gateway resources for Virtual Service
    gateways: []
    # -- Set Istio annotations
    annotations: {}

proxy:
  # -- Number of pods for each deployment
  replicaCount: 1
  updateStrategy:
    # -- Customize updateStrategy
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1

  # -- Set proxy annotations
  annotations: {}
  # -- Set proxy labels
  labels: {}

  service:
    # --- Set the proxy service name
    name: ""
    # -- Set proxy service annotations
    annotations:
      service.kubernetes.io/topology-mode: "Auto"
    # -- Kubernetes Service type
    type: ClusterIP
    ports:
      health:
        # -- Specify the health service port number
        port: 8081
        containerPort: 9081
        remoteContainerPort: 8081
        # -- Defines whether the health port is exposed if service.type is LoadBalancer or NodePort
        exposed: false
      socks:
        # -- Specify the socks service port number
        port: 1080
        containerPort: 9180
        # -- Defines whether the socks port is exposed if service.type is LoadBalancer or NodePort
        exposed: true
      tls:
        # -- Specify the tls service port number
        port: 443
        containerPort: 9443
        remoteContainerPort: 8443
        # -- Defines whether the tls port is exposed if service.type is LoadBalancer or NodePort
        exposed: true
      web:
        # -- Specify the web service port number
        port: 80
        containerPort: 9080
        internalPort: 8080
        remoteContainerPort: 8443
        # -- Defines whether the web port is exposed if service.type is LoadBalancer or NodePort
        exposed: true

  tunnels:
    socks:
      service:
        # -- Specify socks service annotations
        annotations:
          service.kubernetes.io/topology-mode: "Auto"
        # -- Kubernetes Service type
        type: ClusterIP
        ports:
          health:
            # -- Specify the health port number
            port: 8081
            # -- Defines whether the health port is exposed if service.type is LoadBalancer or NodePort
            exposed: false
          socks:
            # -- Specify the socks port number
            port: 1080
            # -- Defines whether the socks port is exposed if service.type is LoadBalancer or NodePort
            exposed: true
      gateway:
        # -- Enable socks tunnel exposure using Kubernetes Gateway API
        enabled: false
        gateway:
          # -- Specifies whether a Gateway resource should be created alongside the routing resource
          create: true
          # -- Set the gatewayClassName
          className: ""
          # -- Specify Gateway ports number
          ports:
            socks: 1080
        # -- Specify the existing gateway resources
        parentRefs: []
        # -- Set gateway annotations
        annotations: {}

    tls:
      service:
        # -- Specify tls service annotations
        annotations:
          service.kubernetes.io/topology-mode: "Auto"
        # -- Kubernetes Service type
        type: ClusterIP
        ports:
          health:
            # -- Specify the health port number
            port: 8081
            # -- Defines whether the health port is exposed if service.type is LoadBalancer or NodePort
            exposed: false
          tls:
            # -- Specify the tls port number
            port: 443
            # -- Defines whether the tls port is exposed if service.type is LoadBalancer or NodePort
            exposed: true
      ingress:
        # -- Enable tls tunnel exposure using Kubernetes Ingress API
        enabled: false
        # -- Specify the ingress controller
        controller: ""
        # -- Set the ingress ClassName
        className: ""
        # -- Set ingress annotations
        annotations: {}
        # -- Specify tls tunnel listeners
        listeners:
          - hostname: api.gitguardian.com
          - hostname: hook.gitguardian.com

      gateway:
        # -- Enable tls tunnel exposure using Kubernetes Gateway API
        enabled: false
        gateway:
          # -- Specifies whether a Gateway resource should be created alongside the routing resource
          create: true
          # -- Set the gatewayClassName
          className: ""
          # -- Specify Gateway ports number
          ports:
            tls: 443
          # -- Specify tls tunnel listeners
          listeners:
            - hostname: api.gitguardian.com
            - hostname: hook.gitguardian.com
        # -- Specify the existing gateway resources
        parentRefs: []
        # -- Set gateway annotations
        annotations: {}

    web:
      service:
        # -- Specify web service annotations
        annotations:
          service.kubernetes.io/topology-mode: "Auto"
        # -- Kubernetes Service type
        type: ClusterIP
        ports:
          health:
            # -- Specify the health port number
            port: 8081
            # -- Defines whether the health port is exposed if service.type is LoadBalancer or NodePort
            exposed: false
          web:
            # -- Specify the web port number
            port: 80
            # -- Defines whether the web port is exposed if service.type is LoadBalancer or NodePort
            exposed: true
        # -- Specify web tunnel listeners
        ## Each listener defines a service name that will be used to construct the full internal service DNS.
        ## - `name`: Corresponds to the service name and will be suffixed by `<namespace>.svc.<clusterDomain>`,
        ## making it resolvable within the cluster.
        ## e.g., if `name: api-gitguardian-com` is defined in the `ggbridge` namespace with cluster domain `cluster.local`,
        ## the full DNS would be `api-gitguardian-com.ggbridge.svc.cluster.local`.
        ##
        ## - `backend`: Specifies the external host where the request will be redirected.
        ##   This is typically a public or internal endpoint that the service should forward traffic to.
        ## In this example, the following redirection will occur through the web tunnel:
        ## http://api-gitguardian-com.ggbridge.svc.cluster.local -> https://api.gitguardian.com
        ##
        ## listeners:
        ##   - name: api-gitguardian-com
        ##     backend: api.gitguardian.com
        listeners: []
      ingress:
        # -- Enable web tunnel exposure using Kubernetes Ingress API
        enabled: false
        # -- Specify the ingress controller
        controller: ""
        # -- Set the ingress ClassName
        className: ""
        # -- Set ingress annotations
        annotations: {}
        # -- Specify web tunnel listeners
        ## In this example, the following redirection will occur through the web tunnel:
        ## - https://api.internal.com -> https://api.gitguardian.com
        ## - https://hook.internal.com -> https://hook.gitguardian.com
        ## e.g:
        ## listeners:
        ##    - hostname: api.internal.com
        ##      backend: api.gitguardian.com
        ##      tls:
        ##        secretName: "internal-crt"
        ##    - hostname: hook.internal.com
        ##      backend: hook.gitguardian.com
        ##      tls:
        ##        secretName: "internal-crt"
        listeners: []

      gateway:
        # -- Enable web tunnel exposure using Kubernetes Gateway API
        enabled: false
        gateway:
          # -- Specifies whether a Gateway resource should be created alongside the routing resource
          create: true
          # -- Set the gatewayClassName
          className: ""
          # -- Specify Gateway ports number
          ports:
            http: 80
            https: 443
          # -- Specify web tunnel listeners
          ## e.g:
          ## listeners:
          ##    - hostname: api.internal.com
          ##      backend: api.gitguardian.com
          ##      tls:
          ##        secretName: "internal-crt"
          ##    - hostname: hook.internal.com
          ##      backend: hook.gitguardian.com
          ##      tls:
          ##        secretName: "internal-crt"
          listeners: []
        # -- Specify the existing gateway resources
        parentRefs: []
        # -- Set gateway annotations
        annotations: {}

  readinessProbe:
    # -- Whether to enable readiness probe for proxy
    enabled: true
    exec:
      command:
        - ggbridge
        - healthcheck
        - -pid-file=/var/run/nginx.pid
        - -grace-period=60
        - http://127.0.0.1:9081/healthz
    initialDelaySeconds: 10
    periodSeconds: 15
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 1

  networkPolicy:
    # -- Specifies whether a NetworkPolicy should be created
    enabled: true
    # -- When true, server will accept connections from any source
    allowExternal: true
    # -- Add extra ingress rules to the NetworkPolicy
    extraIngress: []
    # -- Add extra egress rules to the NetworkPolicy
    extraEgress: []
    # -- Labels to match to allow traffic to the proxy server from other namespaces
    ingressNSMatchLabels: {}
    # -- Pod labels to match to allow traffic to the proxy server from other namespaces
    ingressNSPodMatchLabels: {}

  # -- Node labels for pod assignment
  nodeSelector: {}
  # -- Affinity for pod assignment
  affinity: {}
  # -- Tolerations for pod assignment
  tolerations: []
  # -- Topology spread constraints for pod assignment
  topologySpreadConstraints: []

  resources:
    # -- Set proxy container requests
    requests:
      cpu: 50m
      memory: 64Mi
    # -- Set proxy container limits
    limits: {}
