{{- $webListeners := list -}}
{{- with .Values.proxy.tunnels.web -}}
    {{- range .service.listeners }}
        {{- $hostname := printf "%s.%s.svc.%s" .name $.Release.Namespace $.Values.clusterDomain -}}
        {{- $webListeners = concat $webListeners (list (dict "hostname" $hostname "backend" .backend)) -}}
    {{- end -}}
    {{- if .ingress.enabled -}}
        {{- $webListeners = concat $webListeners .ingress.listeners -}}
    {{- end -}}
    {{- if .gateway.enabled -}}
        {{- $webListeners = concat $webListeners .gateway.gateway.listeners -}}
    {{- end -}}
    {{- if .openShiftRoute.enabled -}}
        {{- $webListeners = concat $webListeners .openShiftRoute.listeners -}}
    {{- end -}}
{{- end -}}

{{- if not .Values.proxy.openresty.enabled }}
load_module "/usr/lib/nginx/modules/ngx_stream_module.so";
{{- end }}

worker_processes 1;

error_log  stderr  {{ .Values.proxy.logLevel }};
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    map_hash_bucket_size 128;
    map_hash_max_size 4096;

    {{- if .Values.proxy.metrics.enabled }}
    client_body_temp_path /var/run/nginx-client-body;
    proxy_temp_path /var/run/nginx-proxy;
    fastcgi_temp_path /var/run/nginx-fastcgi;
    uwsgi_temp_path /var/run/nginx-uwsgi;
    scgi_temp_path /var/run/nginx-scgi;

    lua_shared_dict metrics 10M;

    init_by_lua_block {
        ngx.shared.metrics:set("http_requests_total", 0)
        ngx.shared.metrics:set("healthz_requests_total", 0)
        ngx.shared.metrics:set("web_requests_total", 0)
    }
    {{- end }}

    log_format health 'health $remote_addr [$time_local] '
                        '127.0.0.1 ' '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent"';

    server {
        listen 127.0.0.1:{{ .Values.proxy.service.ports.health.remoteContainerPort }};

        access_log /dev/stdout health;

        location / {
            return 404;
            {{- if .Values.proxy.metrics.enabled }}
            
            log_by_lua_block {
                local metrics = ngx.shared.metrics
                local total = metrics:get("http_requests_total") or 0
                metrics:set("http_requests_total", total + 1)
            }
            {{- end }}
        }

        location /healthz {
            default_type text/plain;
            return 200 "OK\n";
            {{- if .Values.proxy.metrics.enabled }}
            
            log_by_lua_block {
                local metrics = ngx.shared.metrics
                
                local healthz = metrics:get("healthz_requests_total") or 0
                metrics:set("healthz_requests_total", healthz + 1)
                
                local total = metrics:get("http_requests_total") or 0
                metrics:set("http_requests_total", total + 1)
            }
            {{- end }}
        }

        {{- if .Values.proxy.metrics.enabled }}
        location /metrics {
            default_type text/plain;
            content_by_lua_block {
                local metrics = ngx.shared.metrics
                local stream_metrics = ngx.shared.stream_metrics
                local output = {}
                
                table.insert(output, "# HELP nginx_up Nginx is running")
                table.insert(output, "# TYPE nginx_up gauge")
                table.insert(output, "nginx_up 1")
                table.insert(output, "")
                
                table.insert(output, "# HELP nginx_http_requests_total Total HTTP requests")
                table.insert(output, "# TYPE nginx_http_requests_total counter")
                table.insert(output, "nginx_http_requests_total " .. (metrics:get("http_requests_total") or 0))
                table.insert(output, "")
                
                table.insert(output, "# HELP nginx_healthz_requests_total Total healthz requests")
                table.insert(output, "# TYPE nginx_healthz_requests_total counter")
                table.insert(output, "nginx_healthz_requests_total " .. (metrics:get("healthz_requests_total") or 0))
                table.insert(output, "")
                
                table.insert(output, "# HELP nginx_web_requests_total Total web proxy requests")
                table.insert(output, "# TYPE nginx_web_requests_total counter")
                table.insert(output, "nginx_web_requests_total " .. (metrics:get("web_requests_total") or 0))
                table.insert(output, "")
                
                if stream_metrics then
                    table.insert(output, "# HELP nginx_stream_connections_total Total stream connections")
                    table.insert(output, "# TYPE nginx_stream_connections_total counter")
                    table.insert(output, "nginx_stream_connections_total " .. (stream_metrics:get("stream_connections_total") or 0))
                    table.insert(output, "")
                    
                    local sum = stream_metrics:get("upstream_connect_time_sum") or 0
                    local count = stream_metrics:get("upstream_connect_time_count") or 0
                    local avg = count > 0 and (sum / count) or 0
                    
                    table.insert(output, "# HELP nginx_stream_upstream_connect_time_seconds Average upstream connect time")
                    table.insert(output, "# TYPE nginx_stream_upstream_connect_time_seconds gauge")
                    table.insert(output, "nginx_stream_upstream_connect_time_seconds " .. string.format("%.6f", avg))
                    table.insert(output, "")
                    
                    table.insert(output, "# HELP nginx_stream_upstream_connect_time_sum_seconds Total upstream connect time")
                    table.insert(output, "# TYPE nginx_stream_upstream_connect_time_sum_seconds counter")
                    table.insert(output, "nginx_stream_upstream_connect_time_sum_seconds " .. string.format("%.6f", sum))
                    table.insert(output, "")
                    
                    table.insert(output, "# HELP nginx_stream_upstream_connect_time_count_total Total upstream connections")
                    table.insert(output, "# TYPE nginx_stream_upstream_connect_time_count_total counter")
                    table.insert(output, "nginx_stream_upstream_connect_time_count_total " .. count)
                end
                
                ngx.say(table.concat(output, "\n"))
            }
        }
        {{- end }}
    }

    log_format web 'web $remote_addr [$time_local] '
                        '$web_host ' '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent"';

    map $host $web_host {
        {{- range $webListeners }}
        {{ printf "%s %s;" .hostname (default .hostname .backend) }}
        {{- end }}
        default $host;
    }

    server {
        listen {{ .Values.proxy.service.ports.web.containerPort }};

        access_log /dev/stdout web;

        location / {
            proxy_pass https://127.0.0.1:{{ .Values.proxy.service.ports.web.internalPort }};

            proxy_ssl_protocols TLSv1.2 TLSv1.3;
            proxy_ssl_server_name on;
            proxy_ssl_name $web_host;

            {{- if or .Values.caBundle.certs .Values.caBundle.existingSecret }}
            proxy_ssl_verify on;
            proxy_ssl_trusted_certificate /etc/ggbridge/ssl/certs/ca-bundle.crt;
            {{- end }}

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $web_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            {{- if .Values.proxy.metrics.enabled }}
            
            log_by_lua_block {
                local metrics = ngx.shared.metrics
                
                local web = metrics:get("web_requests_total") or 0
                metrics:set("web_requests_total", web + 1)
                
                local total = metrics:get("http_requests_total") or 0
                metrics:set("http_requests_total", total + 1)
            }
            {{- end }}
        }
    }
}

stream {
    map_hash_bucket_size 128;
    map_hash_max_size 4096;

    {{- if .Values.proxy.metrics.enabled }}
    lua_shared_dict stream_metrics 10M;

    init_by_lua_block {
        ngx.shared.stream_metrics:set("stream_connections_total", 0)
        ngx.shared.stream_metrics:set("upstream_connect_time_sum", 0)
        ngx.shared.stream_metrics:set("upstream_connect_time_count", 0)
    }
    {{- end }}

    log_format stream 'stream $proxy_protocol_addr - $remote_addr [$time_local] '
                        '$protocol $status $bytes_sent $bytes_received '
                        '$session_time "$upstream_addr" '
                        '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';

    access_log /dev/stdout stream;

    map $ssl_preread_server_name $backend_name {
        {{- if .Values.whitelist.hosts }}
            {{- range $host := .Values.whitelist.hosts }}
        {{ printf "%s %s;" $host $host }}
            {{- end }}
        {{- else }}
        default $ssl_preread_server_name;
        {{- end }}
    }

    resolver {{ .Values.proxy.resolver }} valid=30s;
    resolver_timeout 5s;

    server {
        listen 127.0.0.1:{{ .Values.proxy.service.ports.tls.remoteContainerPort }} {{ ternary "proxy_protocol" "" .Values.proxyProtocol.enabled }};
        ssl_preread on;
        proxy_pass $backend_name:443;
        {{- if .Values.proxy.metrics.enabled }}
        
        log_by_lua_block {
            local metrics = ngx.shared.stream_metrics
            local connect_time = tonumber(ngx.var.upstream_connect_time) or 0
            local upstream = ngx.var.upstream_addr or "unknown"
            
            local connections = metrics:get("stream_connections_total") or 0
            metrics:set("stream_connections_total", connections + 1)
            
            if connect_time > 0 then
                local sum = metrics:get("upstream_connect_time_sum") or 0
                local count = metrics:get("upstream_connect_time_count") or 0
                metrics:set("upstream_connect_time_sum", sum + connect_time)
                metrics:set("upstream_connect_time_count", count + 1)
            end
        }
        {{- end }}
    }
}