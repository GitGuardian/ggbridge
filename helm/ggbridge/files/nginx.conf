{{- $tunnels :=  ternary .Values.server.tunnels .Values.client.tunnels (eq .Values.mode "server") -}}

load_module "/usr/lib/nginx/modules/ngx_stream_module.so";

worker_processes 1;

error_log  stderr  notice;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    log_format health 'health $remote_addr [$time_local] '
                        '127.0.0.1 ' '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent"';

    # health server
    server {
        listen 127.0.0.1:{{ .Values.proxy.service.ports.health.remoteContainerPort }};

        access_log /dev/stdout health;

        location / {
            return 404;
        }

        location /healthz {
            default_type text/plain;
            return 200 "OK\n";
        }
    }

    {{- if $tunnels.web.enabled }}
    log_format web 'web $remote_addr [$time_local] '
                        '$web_host ' '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent"';

    map $host $web_host {
        {{- range $tunnels.web.listeners }}
        {{ printf "%s %s;" .hostname (default .hostname .upstream) }}
        {{- end }}
        default $host;
    }

    # web proxy server
    server {
        listen {{ .Values.proxy.service.ports.web.containerPort }};

        access_log /dev/stdout web;

        location / {
            proxy_pass https://127.0.0.1:{{ .Values.proxy.service.ports.web.internalPort }};

            proxy_ssl_server_name on;
            proxy_ssl_name $web_host;

            {{- if or .Values.caBundle.certs .Values.caBundle.existingSecret }}
            proxy_ssl_verify on;
            proxy_ssl_trusted_certificate /ca-certs/ca-bundle.crt;
            {{- end }}

            proxy_set_header Host $web_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
    {{- end }}
}

stream {
    log_format stream 'stream $proxy_protocol_addr - $remote_addr [$time_local] '
                        '$protocol $status $bytes_sent $bytes_received '
                        '$session_time "$upstream_addr" '
                        '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';

    access_log /dev/stdout stream;

    map $ssl_preread_server_name $backend_name {
        {{- if .Values.whitelist }}
            {{- range $hostname := .Values.whitelist }}
        {{ printf "%s %s:443;" $hostname $hostname }}
            {{- end }}
        {{- else }}
        default $ssl_preread_server_name;
        {{- end }}
    }

    resolver {{ printf "kube-dns.kube-system.svc.%s" .Values.clusterDomain }} valid=30s;
    resolver_timeout 5s;

    ### web/tls stream server
    # Forwards TLS requests originating from web or tls tunnels.
    server {
        listen 127.0.0.1:{{ .Values.proxy.service.ports.tls.remoteContainerPort }} proxy_protocol;
        ssl_preread on;
        proxy_pass $backend_name;
        proxy_protocol {{ ternary "on" "off" .Values.proxyProtocol.enabled }};
    }
}
