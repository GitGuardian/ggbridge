{{- $index := .index -}}
{{- $context := .context -}}
{{- $releaseNamespace := $context.Release.Namespace -}}
{{- $clusterDomain := $context.Values.clusterDomain -}}

{{- $fullname := ternary (include "ggbridge.server.fullname" $context) (include "ggbridge.client.fullname" $context) (eq $context.Values.mode "server") -}}
{{- $ports := $context.Values.proxy.service.ports -}}
{{- $logLevel := $context.Values.proxy.logLevel -}}
{{- $maxFails := $context.Values.proxy.config.upstream.maxFails | default 1 -}}
{{- $failTimeout := $context.Values.proxy.config.upstream.failTimeout | default "60s" -}}
{{- $healthLoadBalancing := $context.Values.proxy.config.upstream.healthLoadBalancing -}}
{{- $proxyTimeout := $context.Values.proxy.config.server.proxyTimeout | default "600s" -}}
{{- $proxyConnectTimeout := $context.Values.proxy.config.server.proxyConnectTimeout | default "10s" -}}
{{- $customDirectivesConfig := $context.Values.proxy.config.server.customDirectives | default list -}}
{{- $downServers := $context.Values.proxy.config.upstream.downServers | default list -}}
{{- $backupMode := $context.Values.proxy.config.upstream.backupMode | default false -}}

{{- $currentIndex := $index | int -}}
{{- $healthProxyTimeout := "600s" -}}
{{- $healthProxyConnectTimeout := "5s" -}}

{{- if not $context.Values.proxy.openresty.enabled }}
load_module "/usr/lib/nginx/modules/ngx_stream_module.so";
{{- end }}

worker_processes 1;

error_log  stderr  {{ $logLevel }};
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

stream {
    {{- if $context.Values.proxy.metrics.enabled }}
    lua_shared_dict stream_metrics 10M;

    init_by_lua_block {
        {{ range $tunnel, $config := $ports }}
        ngx.shared.stream_metrics:set("{{ $tunnel }}_connections_total", 0)
        ngx.shared.stream_metrics:set("{{ $tunnel }}_connect_time_sum", 0)
        ngx.shared.stream_metrics:set("{{ $tunnel }}_connect_time_count", 0)
        
        ngx.shared.stream_metrics:set("{{ $tunnel }}_connections_success", 0)        -- status 200
        ngx.shared.stream_metrics:set("{{ $tunnel }}_connections_bad_gateway", 0)    -- status 502
        ngx.shared.stream_metrics:set("{{ $tunnel }}_connections_unavailable", 0)    -- status 503  
        ngx.shared.stream_metrics:set("{{ $tunnel }}_connections_timeout", 0)        -- status 504
        ngx.shared.stream_metrics:set("{{ $tunnel }}_connections_other_error", 0)    -- autres status
        {{ end }}
    }
    {{- end }}

    log_format main '$remote_addr [$time_local] '
                    '$protocol $status $bytes_sent $bytes_received '
                    '$session_time "$upstream_addr" '
                    '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';

    access_log /dev/stdout main;

    resolver {{ printf "kube-dns.kube-system.svc.%s" $clusterDomain }} valid=30s;
    resolver_timeout 5s;

    {{- if $context.Values.proxy.metrics.enabled }}
    server {
        listen 127.0.0.1:8081;
        content_by_lua_block {
            local stream_metrics = ngx.shared.stream_metrics
            local output = {}
            
            {{ range $tunnel, $config := $ports }}
            local {{ $tunnel }}_connections = stream_metrics:get("{{ $tunnel }}_connections_total") or 0
            local {{ $tunnel }}_success = stream_metrics:get("{{ $tunnel }}_connections_success") or 0
            local {{ $tunnel }}_bad_gateway = stream_metrics:get("{{ $tunnel }}_connections_bad_gateway") or 0
            local {{ $tunnel }}_unavailable = stream_metrics:get("{{ $tunnel }}_connections_unavailable") or 0
            local {{ $tunnel }}_timeout = stream_metrics:get("{{ $tunnel }}_connections_timeout") or 0
            local {{ $tunnel }}_other_error = stream_metrics:get("{{ $tunnel }}_connections_other_error") or 0
            local {{ $tunnel }}_sum = stream_metrics:get("{{ $tunnel }}_connect_time_sum") or 0
            local {{ $tunnel }}_count = stream_metrics:get("{{ $tunnel }}_connect_time_count") or 0
            local {{ $tunnel }}_avg = {{ $tunnel }}_count > 0 and ({{ $tunnel }}_sum / {{ $tunnel }}_count) or 0
            
            table.insert(output, "# HELP nginx_stream_{{ $tunnel }}_connections_total Total {{ $tunnel }} connections")
            table.insert(output, "# TYPE nginx_stream_{{ $tunnel }}_connections_total counter")
            table.insert(output, "nginx_stream_{{ $tunnel }}_connections_total " .. {{ $tunnel }}_connections)
            table.insert(output, "")
            
            table.insert(output, "# HELP nginx_stream_{{ $tunnel }}_connections_success Successful {{ $tunnel }} connections (status 200)")
            table.insert(output, "# TYPE nginx_stream_{{ $tunnel }}_connections_success counter")
            table.insert(output, "nginx_stream_{{ $tunnel }}_connections_success " .. {{ $tunnel }}_success)
            table.insert(output, "")
            
            table.insert(output, "# HELP nginx_stream_{{ $tunnel }}_connections_bad_gateway Bad gateway {{ $tunnel }} connections (status 502)")
            table.insert(output, "# TYPE nginx_stream_{{ $tunnel }}_connections_bad_gateway counter")
            table.insert(output, "nginx_stream_{{ $tunnel }}_connections_bad_gateway " .. {{ $tunnel }}_bad_gateway)
            table.insert(output, "")
            
            table.insert(output, "# HELP nginx_stream_{{ $tunnel }}_connections_unavailable Service unavailable {{ $tunnel }} connections (status 503)")
            table.insert(output, "# TYPE nginx_stream_{{ $tunnel }}_connections_unavailable counter")
            table.insert(output, "nginx_stream_{{ $tunnel }}_connections_unavailable " .. {{ $tunnel }}_unavailable)
            table.insert(output, "")
            
            table.insert(output, "# HELP nginx_stream_{{ $tunnel }}_connections_timeout Gateway timeout {{ $tunnel }} connections (status 504)")
            table.insert(output, "# TYPE nginx_stream_{{ $tunnel }}_connections_timeout counter")
            table.insert(output, "nginx_stream_{{ $tunnel }}_connections_timeout " .. {{ $tunnel }}_timeout)
            table.insert(output, "")
            
            table.insert(output, "# HELP nginx_stream_{{ $tunnel }}_connections_other_error Other error {{ $tunnel }} connections")
            table.insert(output, "# TYPE nginx_stream_{{ $tunnel }}_connections_other_error counter")
            table.insert(output, "nginx_stream_{{ $tunnel }}_connections_other_error " .. {{ $tunnel }}_other_error)
            table.insert(output, "")
            
            table.insert(output, "# HELP nginx_stream_{{ $tunnel }}_upstream_connect_time_seconds Average {{ $tunnel }} upstream connect time")
            table.insert(output, "# TYPE nginx_stream_{{ $tunnel }}_upstream_connect_time_seconds gauge")
            table.insert(output, "nginx_stream_{{ $tunnel }}_upstream_connect_time_seconds " .. string.format("%.6f", {{ $tunnel }}_avg))
            table.insert(output, "")
            
            table.insert(output, "# HELP nginx_stream_{{ $tunnel }}_upstream_connect_time_sum_seconds Total {{ $tunnel }} upstream connect time")
            table.insert(output, "# TYPE nginx_stream_{{ $tunnel }}_upstream_connect_time_sum_seconds counter")
            table.insert(output, "nginx_stream_{{ $tunnel }}_upstream_connect_time_sum_seconds " .. string.format("%.6f", {{ $tunnel }}_sum))
            table.insert(output, "")
            
            table.insert(output, "# HELP nginx_stream_{{ $tunnel }}_upstream_connect_time_count_total Total {{ $tunnel }} upstream connections with timing")
            table.insert(output, "# TYPE nginx_stream_{{ $tunnel }}_upstream_connect_time_count_total counter")
            table.insert(output, "nginx_stream_{{ $tunnel }}_upstream_connect_time_count_total " .. {{ $tunnel }}_count)
            table.insert(output, "")
            {{ end }}
            
            ngx.print("HTTP/1.1 200 OK\r\n")
            ngx.print("Content-Type: text/plain\r\n")
            ngx.print("Content-Length: " .. string.len(table.concat(output, "\n")) .. "\r\n")
            ngx.print("\r\n")
            ngx.print(table.concat(output, "\n"))
        }
    }
    {{- end }}

    {{- range $tunnel, $config := $ports }}
    upstream {{ $tunnel }} {
        {{- if and (eq $tunnel "health") (not $healthLoadBalancing) }}
          {{- $indexProxyFullname := printf "%s-proxy-%d" $fullname $currentIndex }}
          {{- $isDown := false }}
          {{- range $downServers }}
            {{- if eq (. | int) ($currentIndex | int) }}
              {{- $isDown = true }}
            {{- end }}
          {{- end }}
        server {{ printf "%s.%s.svc.%s" $indexProxyFullname $releaseNamespace $clusterDomain }}:{{ $config.port }} max_fails={{ $maxFails }} fail_timeout={{ $failTimeout }}{{- if $isDown }} down{{- end }};
        {{- else }}
          {{- range $idx := until ($context.Values.deploymentCount | int) }}
            {{- $indexProxyFullname := printf "%s-proxy-%d" $fullname $idx }}
            {{- $isDown := false }}
            {{- range $downServers }}
              {{- if eq (. | int) ($idx | int) }}
                {{- $isDown = true }}
              {{- end }}
            {{- end }}
            {{- if $backupMode }}
              {{- if eq $idx $currentIndex }}
        server {{ printf "%s.%s.svc.%s" $indexProxyFullname $releaseNamespace $clusterDomain }}:{{ $config.port }} max_fails={{ $maxFails }} fail_timeout={{ $failTimeout }}{{- if $isDown }} down{{- end }};
              {{- else }}
        server {{ printf "%s.%s.svc.%s" $indexProxyFullname $releaseNamespace $clusterDomain }}:{{ $config.port }} max_fails={{ $maxFails }} fail_timeout={{ $failTimeout }}{{- if $isDown }} down{{- end }} backup;
              {{- end }}
            {{- else }}
              {{- $weight := ternary 100 1 (eq $idx $currentIndex) }}
        server {{ printf "%s.%s.svc.%s" $indexProxyFullname $releaseNamespace $clusterDomain }}:{{ $config.port }} weight={{ $weight }} max_fails={{ $maxFails }} fail_timeout={{ $failTimeout }}{{- if $isDown }} down{{- end }};
            {{- end }}
          {{- end }}
        {{- end }}
    }
    {{- end }}

    {{ range $tunnel, $config := $ports }}
    server {
        listen {{ $config.containerPort }};
        proxy_pass {{ $tunnel }};
        {{- if eq $tunnel "health" }}
        proxy_timeout {{ $healthProxyTimeout }};
        proxy_connect_timeout {{ $healthProxyConnectTimeout }};
        {{- else }}
        proxy_timeout {{ $proxyTimeout }};
        proxy_connect_timeout {{ $proxyConnectTimeout }};
        {{- end }}
        {{- range $customDirectivesConfig }}
          {{- $applyTo := .applyTo }}
          {{- $shouldApply := false }}
          {{- if kindIs "slice" $applyTo }}
            {{- if has $tunnel $applyTo }}
              {{- $shouldApply = true }}
            {{- end }}
          {{- end }}
          {{- if $shouldApply }}
            {{- range .directives }}
        {{ . }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if $context.Values.proxy.metrics.enabled }}
        
        log_by_lua_block {
            local stream_metrics = ngx.shared.stream_metrics
            local status = tonumber(ngx.var.status) or 0
            local connect_time = tonumber(ngx.var.upstream_connect_time) or 0
            local service_type = "{{ $tunnel }}"
            
            local connections = stream_metrics:get(service_type .. "_connections_total") or 0
            stream_metrics:set(service_type .. "_connections_total", connections + 1)
            
            if status == 200 then
                local success = stream_metrics:get(service_type .. "_connections_success") or 0
                stream_metrics:set(service_type .. "_connections_success", success + 1)
                
                if connect_time > 0 then
                    local sum = stream_metrics:get(service_type .. "_connect_time_sum") or 0
                    local count = stream_metrics:get(service_type .. "_connect_time_count") or 0
                    stream_metrics:set(service_type .. "_connect_time_sum", sum + connect_time)
                    stream_metrics:set(service_type .. "_connect_time_count", count + 1)
                end
                
            elseif status == 502 then
                local bad_gateway = stream_metrics:get(service_type .. "_connections_bad_gateway") or 0
                stream_metrics:set(service_type .. "_connections_bad_gateway", bad_gateway + 1)
                
            elseif status == 503 then
                local unavailable = stream_metrics:get(service_type .. "_connections_unavailable") or 0
                stream_metrics:set(service_type .. "_connections_unavailable", unavailable + 1)
                
            elseif status == 504 then
                local timeout = stream_metrics:get(service_type .. "_connections_timeout") or 0
                stream_metrics:set(service_type .. "_connections_timeout", timeout + 1)
                
            else
                local other_error = stream_metrics:get(service_type .. "_connections_other_error") or 0
                stream_metrics:set(service_type .. "_connections_other_error", other_error + 1)
            end
        }
        {{- end }}
    }
    {{- end }}
}
