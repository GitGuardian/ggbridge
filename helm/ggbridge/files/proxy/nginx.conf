{{- $index := .index -}}
{{- $context := .context -}}
{{- $releaseNamespace := $context.Release.Namespace -}}
{{- $clusterDomain := $context.Values.clusterDomain -}}

{{- $fullname := ternary (include "ggbridge.server.fullname" $context) (include "ggbridge.client.fullname" $context) (eq $context.Values.mode "server") -}}
{{- $ports := $context.Values.proxy.service.ports -}}
{{- $logLevel := $context.Values.proxy.logLevel -}}
{{- $maxFails := $context.Values.proxy.config.upstream.maxFails | default 1 -}}
{{- $failTimeout := $context.Values.proxy.config.upstream.failTimeout | default "60s" -}}
{{- $healthLoadBalancing := $context.Values.proxy.config.upstream.healthLoadBalancing -}}
{{- $proxyTimeout := $context.Values.proxy.config.server.proxyTimeout | default "600s" -}}
{{- $proxyConnectTimeout := $context.Values.proxy.config.server.proxyConnectTimeout | default "10s" -}}
{{- $customDirectivesConfig := $context.Values.proxy.config.server.customDirectives | default list -}}
{{- $downServers := $context.Values.proxy.config.upstream.downServers | default list -}}
{{- $backupMode := $context.Values.proxy.config.upstream.backupMode | default false -}}

{{- $currentIndex := $index | int -}}
{{- $healthProxyTimeout := "600s" -}}
{{- $healthProxyConnectTimeout := "5s" -}}

load_module "/usr/lib/nginx/modules/ngx_stream_module.so";

worker_processes 1;

error_log  stderr  {{ $logLevel }};
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

stream {
    log_format main '$remote_addr [$time_local] '
                    '$protocol $status $bytes_sent $bytes_received '
                    '$session_time "$upstream_addr" '
                    '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';

    access_log /dev/stdout main;

    resolver {{ printf "kube-dns.kube-system.svc.%s" $clusterDomain }} valid=30s;
    resolver_timeout 5s;

    {{- range $tunnel, $config := $ports }}
    upstream {{ $tunnel }} {
        {{- if and (eq $tunnel "health") (not $healthLoadBalancing) }}
          {{- $indexProxyFullname := printf "%s-proxy-%d" $fullname $currentIndex }}
          {{- $isDown := false }}
          {{- range $downServers }}
            {{- if eq (. | int) ($currentIndex | int) }}
              {{- $isDown = true }}
            {{- end }}
          {{- end }}
        server {{ printf "%s.%s.svc.%s" $indexProxyFullname $releaseNamespace $clusterDomain }}:{{ $config.port }} max_fails={{ $maxFails }} fail_timeout={{ $failTimeout }}{{- if $isDown }} down{{- end }};
        {{- else }}
          {{- range $idx := until ($context.Values.deploymentCount | int) }}
            {{- $indexProxyFullname := printf "%s-proxy-%d" $fullname $idx }}
            {{- $isDown := false }}
            {{- range $downServers }}
              {{- if eq (. | int) ($idx | int) }}
                {{- $isDown = true }}
              {{- end }}
            {{- end }}
            {{- if $backupMode }}
              {{- if eq $idx $currentIndex }}
        server {{ printf "%s.%s.svc.%s" $indexProxyFullname $releaseNamespace $clusterDomain }}:{{ $config.port }} max_fails={{ $maxFails }} fail_timeout={{ $failTimeout }}{{- if $isDown }} down{{- end }};
              {{- else }}
        server {{ printf "%s.%s.svc.%s" $indexProxyFullname $releaseNamespace $clusterDomain }}:{{ $config.port }} max_fails={{ $maxFails }} fail_timeout={{ $failTimeout }}{{- if $isDown }} down{{- end }} backup;
              {{- end }}
            {{- else }}
              {{- $weight := ternary 100 1 (eq $idx $currentIndex) }}
        server {{ printf "%s.%s.svc.%s" $indexProxyFullname $releaseNamespace $clusterDomain }}:{{ $config.port }} weight={{ $weight }} max_fails={{ $maxFails }} fail_timeout={{ $failTimeout }}{{- if $isDown }} down{{- end }};
            {{- end }}
          {{- end }}
        {{- end }}
    }
    {{- end }}

    {{ range $tunnel, $config := $ports }}
    server {
        listen {{ $config.containerPort }};
        proxy_pass {{ $tunnel }};
        {{- if eq $tunnel "health" }}
        proxy_timeout {{ $healthProxyTimeout }};
        proxy_connect_timeout {{ $healthProxyConnectTimeout }};
        {{- else }}
        proxy_timeout {{ $proxyTimeout }};
        proxy_connect_timeout {{ $proxyConnectTimeout }};
        {{- end }}
        {{- range $customDirectivesConfig }}
          {{- $applyTo := .applyTo }}
          {{- $shouldApply := false }}
          {{- if kindIs "slice" $applyTo }}
            {{- if has $tunnel $applyTo }}
              {{- $shouldApply = true }}
            {{- end }}
          {{- end }}
          {{- if $shouldApply }}
            {{- range .directives }}
        {{ . }}
            {{- end }}
          {{- end }}
        {{- end }}
    }
    {{- end }}
}
